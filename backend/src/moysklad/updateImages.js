import axios from "axios";
import path from "path";
import fs from "fs";
import sharp from "sharp";
import { getToken } from "./auth.js";
import { fileURLToPath } from "url";

// ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º __dirname –¥–ª—è ES-–º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const imagesDirectory = path.join(__dirname, "..", "..", "public", "img");

// ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(imagesDirectory)) {
	fs.mkdirSync(imagesDirectory, { recursive: true });
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç)
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

const getProducts = async (token) => {
	try {
		const response = await axios.get("https://api.moysklad.ru/api/remap/1.2/entity/assortment", {
			headers: { Authorization: `Bearer ${token}` },
		});
		return response.data.rows;
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:", error.message);
		return [];
	}
};

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
const downloadAndConvertImage = async (image, productId, token, attempt = 1) => {
	const webpPath = path.join(imagesDirectory, `${productId}.webp`);

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
	if (fs.existsSync(webpPath)) {
		console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å: ${webpPath}`);
		return;
	}

	try {
		console.log(`üì∑ [–ü–æ–ø—ã—Ç–∫–∞ ${attempt}] –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ID ${productId}...`);
		await delay(1000); // ‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º

		const response = await axios.get(image.meta.downloadHref, {
			headers: { Authorization: `Bearer ${token}` },
			responseType: "arraybuffer",
		});

		await sharp(response.data).webp().toFile(webpPath);
		console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${webpPath}`);
	} catch (error) {
		if (error.response?.status === 401 && attempt < 3) {
			console.warn(`‚ö† –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–π (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1})...`);
			token = await getToken();
			await downloadAndConvertImage(image, productId, token, attempt + 1);
		} else {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ID ${productId}:`, error.message);
		}
	}
};

const updateImages = async () => {
	let token = await getToken();
	if (!token) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.");
		return;
	}

	const products = await getProducts(token);
	if (!products.length) {
		console.log("‚ö† –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.");
		return;
	}

	let requestCounter = 0;

	for (const product of products) {
		const productId = product.id;
		const webpPath = path.join(imagesDirectory, `${productId}.webp`);

		// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
		if (fs.existsSync(webpPath)) {
			console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${webpPath}`);
			continue;
		}

		console.log(`üîÑ –ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID ${productId}...`);
		await delay(500); // ‚úÖ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ API

		try {
			const imagesResponse = await axios.get(product.images.meta.href, {
				headers: { Authorization: `Bearer ${token}` },
			});
			const images = imagesResponse.data.rows;

			for (const image of images) {
				await downloadAndConvertImage(image, productId, token);
			}
		} catch (error) {
			console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId}:`, error.message);
		}

		// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞
		requestCounter++;
		if (requestCounter % 3 === 0) {
			console.log("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ç–æ–∫–µ–Ω...");
			token = await getToken();
		}
	}

	console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
};

// ‚úÖ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
updateImages();

export { updateImages };
