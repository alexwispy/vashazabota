import getBrands from './getBrands.js';
import getCategories from './getCategories.js';
import { transliterate as tr } from 'transliteration';

const fetchData = async () => {
	try {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤
		const brands = await new Promise((resolve, reject) => {
			getBrands(
				{},
				{
					json: (data) => resolve(Array.isArray(data) ? data : []),
					status: (code) => reject(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤: ${code}`)
				}
			);
		});

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		const categories = await new Promise((resolve, reject) => {
			getCategories(
				{},
				{
					json: (data) => resolve(Array.isArray(data) ? data : []),
					status: (code) => reject(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${code}`)
				}
			);
		});

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´—Å—ã—Ä—ã–µ¬ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		console.log("‚ö† RAW CATEGORIES (–∏–∑ getCategories):", categories);

		// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
		const toTranslit = (text) => {
			if (!text) return '';
			return tr(text)
				.toLowerCase()
				.replace(/\s+/g, '-')
				.replace(/[^a-z0-9-]/g, '');
		};

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã
		const formattedBrands = brands.map((brand) => {
			const slug = toTranslit(brand);
			return { name: slug || 'brand-unknown' };
		});

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
		const formattedCategories = categories.flatMap((category, index) => {
			// –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å—ã—Ä–æ–º –≤–∏–¥–µ
			console.log(`‚ñ∂ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ #${index}:`, category);

			const parentRaw = category.parentCategory || 'category-unknown';
			const parentSlug = toTranslit(parentRaw) || 'category-unknown';

			// –ï—Å–ª–∏ –µ—Å—Ç—å subCategories
			if (Array.isArray(category.subCategories) && category.subCategories.length > 0) {
				console.log(`  ‚û° –£ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${parentRaw}" –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:`, category.subCategories);
				return category.subCategories.map((sub) => {
					if (!sub) {
						return { parent: parentSlug, sub: null };
					}
					const subSlug = toTranslit(sub) || 'sub-unknown';
					return { parent: parentSlug, sub: subSlug };
				});
			}

			console.log(`  ‚û° –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${parentRaw}" –±–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
			// –ï—Å–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç
			return [{ parent: parentSlug, sub: null }];
		});

		// –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
		console.log("üì¶ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º (–ë–ï–ó –¢–û–í–ê–†–û–í, —Ç–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏):");
		console.log("–ë—Ä–µ–Ω–¥—ã:", formattedBrands);
		console.log("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", formattedCategories);

		return {
			brands: formattedBrands,
			categories: formattedCategories
		};

	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
		return { brands: [], categories: [] };
	}
};

export default fetchData;
